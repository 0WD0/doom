#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
这个词法作用域配置是必要的

这是一些在配置 doom 时可能有帮助的额外的 函数/宏
 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys


To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used. Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).
You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

* packages.el
#+begin_src emacs-lisp :tangle packages.el
;;; $DOOMDIR/packages.el -*- no-byte-compile: t; -*-
#+end_src
使用 Doom 安装软件包时，必须在此处声明并运行命令行中的 'doom sync'，然后重启 Emacs 才能让更改生效 -- 或者

从 MELPA、ELPA 或 emacsmirror 安装 SOME-PACKAGE：
~(package! some-package)~

若要从远程 Git 仓库直接安装软件包，您需要指定一个 ~:recipe~ （配方）
关于 ~:recipe~ 接受的格式说明请参见： https://github.com/radian-software/straight.el#the-recipe-format
(package! another-package
  :recipe (:host github :repo "username/repo"))

当您要安装的包中没有 PACKAGENAME.el 文件，或该文件位于仓库子目录中时，您需要在 `:recipe' 中指定 `:files'：
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))

如果想要禁用 Doom 自带的包，可以在此处使用 ~:disable~ 属性：
(package! builtin-package :disable t)

您可以无需指定 ~:recipe~ 的所有属性，就覆盖内置包的配方。这些设置将继承其他部分的配方信息（来自 Doom 或 MELPA/ELPA/Emacsmirror）：
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))

使用 ~:branch~ 指定从特定分支或标签安装包（某些默认分支不是 'master' 的包需要此项配置，因为当前包管理器无法处理；参见 radian-software/straight.el#279）：
(package! builtin-package :recipe (:branch "develop"))

使用 ~:pin~ 指定特定提交哈希来安装包：
(package! builtin-package :pin "1a2b3c4d5e")

Doom 的所有包都默认绑定到特定提交哈希，并在版本更新时更新。使用 `unpin!' 宏可以解除单个包的绑定...
(unpin! pinned-package)
...或多个包
(unpin! pinned-package another-pinned-package)
...或者 *全部* 包（不推荐，很可能导致错误）
(unpin! t)

* Misc

是否解析符号链接
#+begin_src emacs-lisp
(setq find-file-visit-truename t)
#+end_src

缩进风格
#+begin_src emacs-lisp
(setq indent-tabs-mode nil)
(setq tab-width 4)
#+end_src

** consult.el

来自官方文档
#+begin_src emacs-lisp
(after! consult
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; my/command-wrapping-consult    ;; disable auto previews inside my command
   :preview-key '(:debounce 0.4 any) ;; Option 1: Delay preview
   ;; :preview-key "M-."             ;; Option 2: Manual preview
   ))
#+end_src

** nov.el

#+begin_src emacs-lisp :tangle packages.el
(package! nov)
#+end_src

#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+end_src

* 基础设置

** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function.

#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src

#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'frappe)
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:


If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!
#+begin_src emacs-lisp
;; 日常阅读使用 Fira Code，代码使用 Fira Code
(setq doom-font (font-spec :family "Fira Code" :size 24 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 24)
      doom-big-font (font-spec :family "Fira Code" :size 36)
      doom-serif-font (font-spec :family "Fira Sans" :size 24))

;; 中文字体配置 - 使用最佳实践
(defun my-cjk-font ()
  "Set CJK font for mixed Chinese-English display"
  (dolist (charset '(kana han cjk-misc symbol bopomofo))
    (set-fontset-font t charset (font-spec :family "LXGW WenKai"))))

(add-hook 'after-setting-font-hook #'my-cjk-font)

;; 设定所有英文斜体使用 Hack Nerd Font
(custom-set-faces!
 '(italic :family "Hack Nerd Font" :slant italic))
#+end_src

** Line numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* org-mode
org 是一个强大的笔记和文档管理工具，Doom Emacs 提供了许多配置选项来增强 org-mode 的功能。

#+begin_src emacs-lisp
(setq org-directory "~/org"
      org-roam-directory "~/org/roam"
      org-roam-completion-everywhere t
      org-agenda-files '("~/org")
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      ;; org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0
      )
#+end_src

** UI

*** My +pretty

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear :pin "32ee50f8fdfa449bbc235617549c1bccb503cb09")
(package! org-modern :pin "1723689710715da9134e62ae7e6d41891031813c")
(package! org-modern-indent
  :recipe (:host github :repo "jdtsmith/org-modern-indent"))
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)
        org-hide-emphasis-markers t
        org-pretty-entities nil
        org-appear-autosubmarkers t
        org-appear-inside-latex t
        org-appear-autolinks 'just-brackets
        org-appear-autoentities t))

(use-package! org-appear
  :hook (org-mode . org-appear-mode))

(add-hook 'org-mode-hook #'org-modern-indent-mode 90)

(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :hook (org-agenda-finalize . org-modern-agenda)
  :init
  (after! org
    (setq org-hide-emphasis-markers t
          org-pretty-entities nil))
  :config
  ;; HACK: The default unicode symbol for checked boxes often turn out much
  ;;   larger than the others, so I swap it out with one that's more likely to
  ;;   be consistent.
  (setf (alist-get ?X org-modern-checkbox) #("□x" 0 2 (composition ((2)))))

  ;; HACK: If `org-indent-mode' is active, org-modern's default of hiding
  ;;   leading stars makes sub-headings look too sunken into the left margin.
  ;;   Those stars are already "hidden" by `org-hide-leading-stars' anyway, so
  ;;   rely on just that.
  (add-hook! 'org-modern-mode-hook
    (defun +org-modern-show-hidden-stars-in-indent-mode-h ()
      (when (bound-and-true-p org-indent-mode)
        (setq-local org-modern-hide-stars nil))))

  ;; Carry over the default values of `org-todo-keyword-faces', `org-tag-faces',
  ;; and `org-priority-faces' as reasonably as possible, but only if the user
  ;; hasn't already modified them.
  (letf! (defun new-spec (spec)
           (if (or (facep (cdr spec))
                   (not (keywordp (car-safe (cdr spec)))))
               `(:inherit ,(cdr spec))
             (cdr spec)))
    (unless org-modern-tag-faces
      (dolist (spec org-tag-faces)
        (add-to-list 'org-modern-tag-faces `(,(car spec) :inverse-video t ,@(new-spec spec)))))
    (unless org-modern-todo-faces
      (dolist (spec org-todo-keyword-faces)
        (add-to-list 'org-modern-todo-faces `(,(car spec) :inverse-video t ,@(new-spec spec)))))
    (unless org-modern-priority-faces
      (dolist (spec org-priority-faces)
        (add-to-list 'org-modern-priority-faces `(,(car spec) :inverse-video t ,@(new-spec spec)))))))
#+end_src

*** org-mode 标题颜色设置

#+begin_src emacs-lisp
(custom-set-faces!
   '(org-level-1 :foreground "#c6d0f5" :weight bold :height 1.3)      ; 纯文本色，最亮
   '(org-level-2 :foreground "#b5bfe2" :weight semi-bold :height 1.2) ; 稍微暗一点
   '(org-level-3 :foreground "#a4aed0" :weight semi-bold :height 1.1) ; 更暗
   '(org-level-4 :foreground "#939dbd" :weight normal)                ; 继续变暗
   '(org-level-5 :foreground "#828cab" :weight normal)                ; 更暗
   '(org-level-6 :foreground "#717b98" :weight normal)                ; 再暗
   '(org-level-7 :foreground "#606a86" :weight normal)                ; 很暗
   '(org-level-8 :foreground "#4f5973" :weight normal))               ; 最暗
#+end_src

*** org-mode 代码块颜色配置

#+begin_src emacs-lisp
;; 自定义 org-mode 代码块颜色 - 与 catppuccin frappe 主题协调
(after! org
  (custom-set-faces!
   ;; 代码块背景 - 使用稍暗的背景色
   ;; '(org-block :background "#292c3c" :extend t)
   ;; 代码块开始/结束标记
   '(org-block-begin-line :background "#232634" :foreground "#737994" :extend t)
   '(org-block-end-line :background "#232634" :foreground "#737994" :extend t)
   ;; 行内代码颜色
   '(org-block :foreground "#c6d0f5" :extend t)))
#+end_src

*** 对 org-mode 禁用 indent-bars

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (when (bound-and-true-p indent-bars-mode)
              (indent-bars-mode -1))))
#+end_src


** org-roam 增强

*** 快速打开 =:ROAM_REFS:=

#+begin_src emacs-lisp
(defun my/open-roam-refs ()
  "Open one of the ROAM_REFS links for current entry."
  (interactive)
  (let ((refs (org-entry-get nil "ROAM_REFS")))
    (when refs
      (let* ((links (split-string refs " "))
             (link (completing-read "Open link: " links)))
        (browse-url link)))))

(map! :map org-mode-map
      :localleader
      :prefix ("m" . "org-roam")
      "b" #'my/open-roam-refs)
#+end_src

** TODO 自动为 :chat: 标签添加 folded VISIBILITY

还未能正常工作

#+begin_src emacs-lisp :tangle no
(after! org
  (defun my/org-auto-fold-chat-headings ()
    "Automatically add VISIBILITY: folded property to headings with :chat: tag."
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (while (re-search-forward "^\\*+ " nil t)
          (when (org-at-heading-p)
            (let ((tags (org-get-tags nil t)))
              (when (member "chat" tags)
                (unless (string= (org-entry-get nil "VISIBILITY") "folded")
                  (org-entry-put nil "VISIBILITY" "folded")))))))))

  (defun my/org-add-visibility-on-tag-change ()
    "Add folded VISIBILITY when :chat: tag is added."
    (when (org-at-heading-p)
      (let ((tags (org-get-tags nil t)))
        (when (member "chat" tags)
          (unless (string= (org-entry-get nil "VISIBILITY") "folded")
            (org-entry-put nil "VISIBILITY" "folded")
            (org-cycle-hide-property-drawers 'overview))))))

  ;; 当标签改变时检查
  (add-hook 'org-after-tags-change-hook #'my/org-add-visibility-on-tag-change)
  
  ;; 打开文件时扫描整个文件
  (add-hook 'org-mode-hook 
            (lambda ()
              (run-with-idle-timer 0.1 nil #'my/org-auto-fold-chat-headings)))
  
  ;; 保存文件前自动添加
  (add-hook 'before-save-hook 
            (lambda ()
              (when (eq major-mode 'org-mode)
                (my/org-auto-fold-chat-headings)))))
#+end_src

** org-babel

*** ob-C-stdin

[[https://github.com/cxa/ob-C-stdin/tree/main][GitHub]]
让 C/C++ 支持 ~:stdin <element-name>~

很好用，可以直接在笔记里跑样例了

#+begin_src emacs-lisp
(after! ob-C
  (defun org-babel-C-execute/filter-args (args)
    (when-let* ((params (cadr args))
                (stdin (cdr (assoc :stdin params)))
                (res (org-babel-ref-resolve stdin))
                (stdin (org-babel-temp-file "c-stdin-")))
      (with-temp-file stdin (insert res))
      (let* ((cmdline (assoc :cmdline params))
             (cmdline-val (or (cdr cmdline) "")))
        (when cmdline (setq params (delq cmdline params)))
        (setq params
              (cons (cons :cmdline (concat cmdline-val " <" stdin))
                    params))
        (setf (cadr args) params)))
    args)

  (with-eval-after-load 'ob-C
    (advice-add 'org-babel-C-execute :filter-args
                #'org-babel-C-execute/filter-args)))
#+end_src

** org-latex-preview

*** 添加 LaTeX 包

貌似没有区别

#+begin_src emacs-lisp :tangle no
(after! org
  (dolist (pkg '("amsmath" "amssymb" "mathtools" "mathrsfs"))
    (add-to-list 'org-latex-packages-alist `("" ,pkg t))))
#+end_src

*** LaTeX 预览渲染进程设置

#+begin_src emacs-lisp
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src

*** LaTeX 预览图像缩放

[[https://karthinks.com/software/scaling-latex-previews-in-emacs/][Scaling Latex previews in Emacs | Karthinks]] 这篇文章和评论区帮了大忙了

#+begin_src emacs-lisp
(defun my/text-scale-adjust-latex-previews ()
  "Adjust the size of latex preview fragments when changing the buffer's text scale."
  (pcase major-mode
    ('latex-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'category)
               'preview-overlay)
           (my/text-scale--resize-fragment ov))))
    ('org-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'org-overlay-type)
               'org-latex-overlay)
           (my/text-scale--resize-fragment ov))))))

(defun my/text-scale--resize-fragment (ov)
  ;; 直接根据当前文本缩放设置图像的 :scale
  ;; 由于 org-format-latex-options 的 :scale 固定为 1.0，这里直接设置最终缩放
  (let* ((base-scale 1.0)  ; 基础缩放比例，可以调整
         (step (if (boundp 'text-scale-mode-step) text-scale-mode-step 1.2))
         (amount (if (boundp 'text-scale-mode-amount) text-scale-mode-amount 0))
         (factor (expt step amount))
         (new-scale (* base-scale factor)))
    ;; 更新display的scale
    (overlay-put
     ov 'display
     (cons 'image
           (plist-put
            (cdr (overlay-get ov 'display))
            :scale new-scale)))))

(add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)

;; 在LaTeX预览渲染后立即应用正确的缩放
(defun my/latex-preview-post-render (&rest _)
  "在LaTeX预览渲染后应用当前的文本缩放"
  (when (eq major-mode 'org-mode)
    (my/text-scale-adjust-latex-previews)))

;; 使用advice拦截LaTeX预览渲染函数
(after! org
  (advice-add 'org-latex-preview :after #'my/latex-preview-post-render))
#+end_src

**** TODO 在标题处按 RET 时也会 toggle latex 预览，此时预览跳出的大小没有被正确设置！
**** TODO 现在的设置没有随字体大小变化而变化，在字体调大之后预览会出现占不满行高的情况

*** Highlight

不知道怎么单独设置行内 LaTeX 块的背景颜色，貌似和代码块是绑在一起的，没有成功
#+begin_src emacs-lisp :tangle no
(setq org-highlight-latex-and-related '(native script))

(after! org
  ;; 设置LaTeX公式背景色与正常文本背景一致
  (custom-set-faces!
   `(org-latex-and-related :background ,(doom-color 'bg) :inherit nil))
  
  ;; 强制设置org-latex-and-related face的背景
  (defun my/fix-latex-background ()
    "Fix LaTeX fragments background in org-mode"
    (when (eq major-mode 'org-mode)
      (face-remap-add-relative 'org-latex-and-related 
                               :background (doom-color 'bg))))
  
  (add-hook 'org-mode-hook #'my/fix-latex-background)
  (add-hook 'doom-load-theme-hook #'my/fix-latex-background))

;; (after! org-src
;;   (add-to-list 'org-src-block-faces
;;                `("latex" (:background ,(doom-color 'bg)
;;                           :extend t))))
#+end_src

*** evil-mode

不知道有什么用
#+begin_src emacs-lisp :tangle no
(add-hook! 'org-src-mode-hook
  (when (string= major-mode "latex-mode")
    (evil-tex-mode 1)))
#+end_src

** ox-hugo
#+begin_src emacs-lisp
(after! org
  (setq org-id-extra-files (directory-files-recursively org-roam-directory "\.org$")))
#+end_src

** 把一个 region 转换为 org-mode

参考 [[http://yummymelon.com/devnull/converting-a-markdown-region-to-org-revisited.html][nfdn: Converting a Markdown Region to Org Revisited]]

#+begin_src emacs-lisp
(defun my-md-to-org-region (start end)
  "Convert region from markdown to org"
  (interactive "r")
  (shell-command-on-region start end "pandoc -f markdown -t org" t t))
#+end_src

** Deft :ARCHIVE:
我觉得完全用不到，这不适合和 org-roam 配合使用

#+begin_src emacs-lisp :tangle no
(after! org
  (setq deft-recursive t
        deft-use-filter-string-for-filename t
        deft-default-extension "org"
        deft-directory org-directory))
#+end_src

** org-supertag :ARCHIVE:
无法正常工作
#+begin_src emacs-lisp :tangle no
(package! org-supertag
  :recipe (:host github :repo "yibie/org-supertag"))
(package! deferred)
(package! epc)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! org-supertag
  :after org
  :config
  (org-supertag-setup))

(setq org-supertag-sync-directories '("~/org")) ;; 注意这里不能直接写 org-directory，格式是不一样的，直接写会变成 126 error code
#+end_src

** org-transclusion :ARCHIVE:

#+begin_src emacs-lisp :tangle no
(package! org-transclusion)
#+end_src

#+begin_src emacs-lisp :tangle no
;; (use-package! org-transclusion
;;               :after org
;;               :init
;;               (map!
;;                :map global-map "<f12>" #'org-transclusion-add
;;                :leader
;;                :prefix "n"
;;                :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))

(use-package! org-transclusion
  :after org
  :init
  (map!
   :map (org-mode-map)
   :localleader ;; 这里表示 <leader>m
   :prefix ("u" . "transclUde")
   :desc "Mode" "t" #'org-transclusion-mode
   :desc "Deactivate" "D" #'org-transclusion-deactivate
   :desc "Refresh" "f" #'org-transclusion-refresh

   ;; Adding
   :desc "Add" "a" #'org-transclusion-add
   :desc "Add all" "A" #'org-transclusion-add-all
   :desc "Add From link" "l" #'org-transclusion-make-from-link

   ;; Removing
   :desc "Remove all" "r" #'org-transclusion-remove
   :desc "Remove all" "R" #'org-transclusion-remove-all

   ;; Live sync
   :desc "Start live sync" "s" #'org-transclusion-live-sync-start
   :desc "Stop live sync" "S" #'org-transclusion-live-sync-exit

   ;; Navigating
   :desc "Open source" "o" #'org-transclusion-move-to-source

   ;; Subtrees
   :desc "Demote Subtree" "h" #'org-transclusion-demote-subtree
   :desc "Promote Subtree" "l" #'org-transclusion-promote-subtree)
  :config
  (add-hook 'before-save-hook #'org-transclusion-refresh))
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

#+begin_src emacs-lisp :tangle no
(after! vetico
(defun completion--regex-pinyin (str)
  (orderless-regexp (pinyinlib-build-regexp-string str)))
(add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src

** valign 表格对齐 :ARCHIVE:

不使用 org-modern 的表格美化，改用 valign

#+begin_src emacs-lisp :tangle no
(package! valign)
#+end_src

#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook #'valign-mode)
(after! org
  (setq valign-fancy-bar t
        org-modern-table nil))
#+end_src

* evil 相关

** insert mode 中 C-n/p 设置为上下行

因为它本来是补全相关的，所以只要改 corfu 的设置就行了

现在我如果要手动唤起补全，就用 C-SPC
然后在唤起 popup 之后用 C-n/p 切换上下待选项依然是可以用的！

#+begin_src emacs-lisp
(after! corfu
  (map! :map corfu-mode-map
        :i "C-n" #'next-line
        :i "C-p" #'previous-line))
#+end_src

* Program
** Languages
*** C/C++
**** 缩进

#+begin_src emacs-lisp
;; tree-sitter 模式的缩进设置
(setq c-ts-mode-indent-offset 4)
#+end_src

**** 运行与调试

我希望使用 gdb 调试，怎么写 dape 配置？

#+begin_src emacs-lisp
;; 定义运行 C++ 文件的函数
(defun my-run-cpp ()
  "Compile and run current C++ file with optimization flags."
  (interactive)
  (save-buffer) ;; 保存当前文件（对应 :w）
  (let* ((cfile (buffer-file-name)) ; 获取当前文件路径
         (out-file (file-name-sans-extension cfile))
         (build-cmd (format "g++ -std=c++23 -Wshadow -Wconversion -Wall -static-libgcc -o %s.out %s && time %s.out < ~/IO/1.in > ~/IO/1.ans"
                            out-file cfile out-file))) ; 完整编译命令
    (split-window-vertically) ; 创建新窗口
    (other-window 1) ; 切换到新窗口
    (compile build-cmd))) ; 启动编译任务


(defun my-run-cpp-debug ()
  "Compile C++ source with debug mode (-g)."
  (interactive)
  (save-buffer)
  (let* ((cfile (buffer-file-name))
         (out-file (file-name-sans-extension cfile))
         (build-cmd (format "g++ -g -std=c++23 -Wshadow -Wconversion -Wall -static-libgcc -o %s.out %s"
                            out-file cfile)))
    (split-window-vertically)
    (other-window 1)
    (compile build-cmd)))


;; 在 c++-mode 下设置快捷键
(add-hook 'c++-mode-hook
          (lambda ()
            (define-key c++-mode-map (kbd "M-n") 'my-run-cpp) ; Alt-n
            ;; (define-key c++-mode-map (kbd "M-m") 'my-run-cpp-debug) ; Alt-m
            ;; 如果你想要支持 F7/F8 看注释里的 Neovim 代码
            ;; (define-key c++-mode-map (kbd "<f7>") 'my-run-cpp)
            ;; (define-key c++-mode-map (kbd "<f8>") 'my-run-cpp-debug)
            ))
#+end_src

*** Python

**** lsp-pyright config
切换到 basedpyright

#+begin_src emacs-lisp
(setq lsp-pyright-langserver-command "basedpyright")
#+end_src

**** dape config
自带的 debugpy 配置不能正常工作。。。

**** 缩进示例
#+begin_src emacs-lisp :tangle no
(add-hook 'python-mode-hook
            (lambda ()
              (setq-local tab-width 4)
              (setq-local indent-tabs-mode nil)))
#+end_src

** lsp-mode config

还没有让它正常工作

#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-idle-delay 0.5
        lsp-log-io nil
        lsp-completion-provider :capf
        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil
        lsp-enable-on-type-formatting nil
        lsp-enable-snippet nil
        lsp-enable-symbol-highlighting nil
        lsp-enable-links nil
        lsp-lens-enable t  ;; 不起作用？
        lsp-headerline-breadcrumb-enable t))

;; LSP UI settings for better performance
(after! lsp-ui
  (setq lsp-ui-doc-enable nil
        lsp-ui-sideline-show-diagnostics t      ; 显示诊断信息
        lsp-ui-sideline-show-hover nil          ; 不显示hover信息
        lsp-ui-sideline-show-code-actions nil   ; 显示代码操作
        lsp-ui-sideline-update-mode 'line       ; 只在当前行更新
        lsp-ui-sideline-delay 0.1               ; 减少延迟
        lsp-ui-sideline-diagnostic-max-lines 3  ; 每个诊断最多显示行数
        lsp-ui-sideline-diagnostic-max-line-length 100 ; 最大行长度
        lsp-ui-peek-enable t))
#+end_src

** claude-code-ide.el

#+begin_src emacs-lisp :tangle packages.el
(package! claude-code-ide
  :recipe (:host github :repo "manzaltu/claude-code-ide.el"))
#+end_src

** copilot.el

#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
#+end_src


#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)

              ;; ;; Accept completions (Fish-shell inspired, no conflicts)
              ;; ("<right>" . 'copilot-accept-completion)
              ;; ("C-f" . 'copilot-accept-completion)

              ;; ;; Word-by-word acceptance
              ;; ("M-<right>" . 'copilot-accept-completion-by-word)
              ;; ("M-f" . 'copilot-accept-completion-by-word)

              ;; ;; Line-by-line and navigation
              ;; ("C-e" . 'copilot-accept-completion-by-line)
              ;; ("<end>" . 'copilot-accept-completion-by-line)
              ;; ("M-n" . 'copilot-next-completion)
              ;; ("M-p" . 'copilot-previous-completion)
              ;; ("C-g" . 'copilot-clear-overlay)
              )
  :config
  (setq copilot-indent-offset-warning-disable t)
  ;; (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode 2))
  
  ;; Enable only in insert state for Evil users
  (when (modulep! :editor evil)
    (setq copilot-enable-predicates '(evil-insert-state-p)))

  ;; Disable in problematic modes
  (add-to-list 'copilot-disable-predicates
               (lambda () (member major-mode '(shell-mode eshell-mode term-mode
                                               vterm-mode comint-mode)))))
#+end_src

*** 遇到的一些小问题
[[https://github.com/copilot-emacs/copilot.el/issues/312][copilot-emacs/copilot.el#312 Warning (copilot): copilot--infer-indentation-of...]]
这个问题主要来自一些模式下 copilot 不能正确推断缩进，这个时候需要我们自己手动配置一下，或者干脆禁用掉这个警告

corfu 的补全可能会覆盖上这个自动上屏的 copilot 的补全，而 company 生态里有 company-box 可以解决这个问题

有一些信息来源说有 company 依赖，实际上是没有的
[[https://emacs-china.org/t/copilot/20348/20?u=0wd0][Copilot 非官方插件 - #20，来自 zerol - Emacs-general - Emacs China]]

** corfu

#+begin_src emacs-lisp
;;; Corfu configuration
(after! corfu
  (setq corfu-auto t                    ; Enable auto completion
        corfu-auto-delay 0.0            ; Balanced performance
        corfu-auto-prefix 2             ; Minimum prefix length
        corfu-cycle t                   ; Enable cycling
        +corfu-want-tab-prefer-expand-snippets t))
#+end_src

** treesit.el

#+begin_src emacs-lisp
(setq treesit-font-lock-level 4)
#+end_src
