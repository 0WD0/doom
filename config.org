#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
这个词法作用域配置是必要的

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys


To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used. Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

* packages.el
#+begin_src emacs-lisp :tangle packages.el
;;; $DOOMDIR/packages.el -*- no-byte-compile: t; -*-

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; (package! org-modern-indent
;;   :recipe (:host github :repo "jdtsmith/org-modern-indent"))

;; (package! org-roam-ui)
;; (package! valign)
;; (package! xenops)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)
#+end_src

* Misc
是否解析符号链接
#+begin_src emacs-lisp
(setq find-file-visit-truename t)
#+end_src


* 基础设置
** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function.

#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src

#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'frappe)
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:


If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
#+end_src

** Line numbers
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

* org 相关
org 是一个强大的笔记和文档管理工具，Doom Emacs 提供了许多配置选项来增强 org-mode 的功能。

#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

** Deft
单纯是为了全文搜索，我还是不太理解为什么全文搜索要专门用一个插件，一般的 grep 有什么问题？
感觉 Emacs 里并没有 Telescope 的直接替代品啊

#+begin_src emacs-lisp
(after! org
  (setq deft-recursive t
        deft-use-filter-string-for-filename t
        deft-default-extension "org"
        deft-directory org-directory))
#+end_src

** org-latex-preview

*** 添加 LaTeX 包

#+begin_src emacs-lisp :tangle no
(after! org
  (dolist (pkg '("amsmath" "amssymb" "mathtools" "mathrsfs"))
    (add-to-list 'org-latex-packages-alist `("" ,pkg t))))
#+end_src

*** LaTeX 预览渲染进程设置

#+begin_src emacs-lisp
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src

*** LaTeX 预览图像缩放

[[https://karthinks.com/software/scaling-latex-previews-in-emacs/][Scaling Latex previews in Emacs | Karthinks]] 这篇文章和评论区帮了大忙了

#+begin_src emacs-lisp
(defun my/text-scale-adjust-latex-previews ()
  "Adjust the size of latex preview fragments when changing the buffer's text scale."
  (pcase major-mode
    ('latex-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'category)
               'preview-overlay)
           (my/text-scale--resize-fragment ov))))
    ('org-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'org-overlay-type)
               'org-latex-overlay)
           (my/text-scale--resize-fragment ov))))))

(defun my/text-scale--resize-fragment (ov)
  ;; 直接根据当前文本缩放设置图像的 :scale
  ;; 由于 org-format-latex-options 的 :scale 固定为 1.0，这里直接设置最终缩放
  (let* ((base-scale 1.0)  ; 基础缩放比例，可以调整
         (step (if (boundp 'text-scale-mode-step) text-scale-mode-step 1.2))
         (amount (if (boundp 'text-scale-mode-amount) text-scale-mode-amount 0))
         (factor (expt step amount))
         (new-scale (* base-scale factor)))
    ;; 更新display的scale
    (overlay-put
     ov 'display
     (cons 'image
           (plist-put
            (cdr (overlay-get ov 'display))
            :scale new-scale)))))

(add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)

;; 在LaTeX预览渲染后立即应用正确的缩放
(defun my/latex-preview-post-render (&rest _)
  "在LaTeX预览渲染后应用当前的文本缩放"
  (when (eq major-mode 'org-mode)
    (my/text-scale-adjust-latex-previews)))

;; 使用advice拦截LaTeX预览渲染函数
(after! org
  (advice-add 'org-latex-preview :after #'my/latex-preview-post-render))
#+end_src

**** TODO 在标题处按 RET 时也会 toggle latex 预览，此时预览跳出的大小没有被正确设置！

*** Highlight
不知道怎么单独设置行内 LaTeX 块的背景颜色，貌似和代码块是绑在一起的，没有成功
#+begin_src emacs-lisp :tangle no
(setq org-highlight-latex-and-related '(native script))

(after! org
  ;; 设置LaTeX公式背景色与正常文本背景一致
  (custom-set-faces!
   `(org-latex-and-related :background ,(doom-color 'bg) :inherit nil))
  
  ;; 强制设置org-latex-and-related face的背景
  (defun my/fix-latex-background ()
    "Fix LaTeX fragments background in org-mode"
    (when (eq major-mode 'org-mode)
      (face-remap-add-relative 'org-latex-and-related 
                               :background (doom-color 'bg))))
  
  (add-hook 'org-mode-hook #'my/fix-latex-background)
  (add-hook 'doom-load-theme-hook #'my/fix-latex-background))

;; (after! org-src
;;   (add-to-list 'org-src-block-faces
;;                `("latex" (:background ,(doom-color 'bg)
;;                           :extend t))))
#+end_src
*** evil-mode
不知道有什么用
#+begin_src emacs-lisp :tangle no
(add-hook! 'org-src-mode-hook
  (when (string= major-mode "latex-mode")
    (evil-tex-mode 1)))
#+end_src

** org-appear
貌似没有区别
#+begin_src emacs-lisp :tangle no
(after! org-appear
  (setq org-hide-emphasis-markers t
        org-pretty-entities nil
        ;; org-appear-autoentities t
        org-appear-autosubmarkers t
        org-appear-inside-latex t
        org-appear-autolinks 'just-brackets))
#+end_src

** org-supertag
无法正常工作
#+begin_src emacs-lisp :tangle no
(package! org-supertag
  :recipe (:host github :repo "yibie/org-supertag"))
(package! deferred)
(package! epc)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! org-supertag
  :after org
  :config
  (org-supertag-setup))

(setq org-supertag-sync-directories '("~/org")) ;; 注意这里不能直接写 org-directory，格式是不一样的，直接写会变成 126 error code
#+end_src

** org-transclusion

#+begin_src emacs-lisp :tangle no
(package! org-transclusion)
#+end_src

#+begin_src emacs-lisp :tangle no
;; (use-package! org-transclusion
;;               :after org
;;               :init
;;               (map!
;;                :map global-map "<f12>" #'org-transclusion-add
;;                :leader
;;                :prefix "n"
;;                :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))

(use-package! org-transclusion
  :after org
  :init
  (map!
   :map (org-mode-map)
   :localleader ;; 这里表示 <leader>m
   :prefix ("u" . "transclUde")
   :desc "Mode" "t" #'org-transclusion-mode
   :desc "Deactivate" "D" #'org-transclusion-deactivate
   :desc "Refresh" "f" #'org-transclusion-refresh

   ;; Adding
   :desc "Add" "a" #'org-transclusion-add
   :desc "Add all" "A" #'org-transclusion-add-all
   :desc "Add From link" "l" #'org-transclusion-make-from-link

   ;; Removing
   :desc "Remove all" "r" #'org-transclusion-remove
   :desc "Remove all" "R" #'org-transclusion-remove-all

   ;; Live sync
   :desc "Start live sync" "s" #'org-transclusion-live-sync-start
   :desc "Stop live sync" "S" #'org-transclusion-live-sync-exit

   ;; Navigating
   :desc "Open source" "o" #'org-transclusion-move-to-source

   ;; Subtrees
   :desc "Demote Subtree" "h" #'org-transclusion-demote-subtree
   :desc "Promote Subtree" "l" #'org-transclusion-promote-subtree)
  :config
  (add-hook 'before-save-hook #'org-transclusion-refresh))
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

#+begin_src emacs-lisp :tangle no
(after! vetico
(defun completion--regex-pinyin (str)
  (orderless-regexp (pinyinlib-build-regexp-string str)))
(add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src

* evil 相关
** insert mode 中 C-n/p 设置为上下行
因为它本来是补全相关的，所以只要改 corfu 的设置就行了

现在我如果要手动唤起补全，就用 C-SPC
然后在唤起 popup 之后用 C-n/p 切换上下待选项依然是可以用的！

#+begin_src emacs-lisp
(after! corfu
  (map! :map corfu-mode-map
        :i "C-n" #'next-line
        :i "C-p" #'previous-line))
#+end_src
* Lang
** Lsp config
还没有让它正常工作
#+begin_src emacs-lisp :tangle no
;; LSP UI Sideline - 总是显示诊断信息在行尾
(setq lsp-ui-sideline-show-diagnostics t      ; 显示诊断信息
      lsp-ui-sideline-show-hover nil          ; 不显示hover信息
      lsp-ui-sideline-show-code-actions t     ; 显示代码操作
      lsp-ui-sideline-update-mode 'line       ; 只在当前行更新
      lsp-ui-sideline-delay 0.1               ; 减少延迟
      lsp-ui-sideline-diagnostic-max-lines 1  ; 每个诊断最多显示行数
      lsp-ui-sideline-diagnostic-max-line-length 100) ; 最大行长度
#+end_src
